#!/bin/bash
function gen_config {
    echo "Generating demo_net and demo_router"
    openstack network create demo_net
    openstack subnet create subdemo_net --network demo_net --subnet-range 10.0.0.0/24
    openstack router create demo_router
    openstack router set demo_router --external-gateway public
    openstack router add subnet demo_router subdemo_net

    echo "Generating sample config"
    DEMO_NET=$(openstack network list | awk '/demo_net/ { print $2 }')
    IMAGE_ID=$(openstack image list | awk '/VyOS/ { print $2 }')
    cat > ./sample-vim.yaml <<EOF
auth_url: http://127.0.0.1/identity
username: nfv_user
password: devstack
project_name: nfv
project_domain_name: default
user_domain_name: default
EOF
    cat > ./sample-vnfd.yaml <<EOF
tosca_definitions_version: tosca_simple_profile_for_nfv_1_0_0

description: Demo example

metadata:
  template_name: sample-tosca-vnfd

topology_template:
  node_templates:
    VDU1:
      type: tosca.nodes.nfv.VDU.Tacker
      capabilities:
        nfv_compute:
          properties:
            num_cpus: 1
            mem_size: 2048 MB
            disk_size: 50 GB
      properties:
        image: ${IMAGE_ID}
        availability_zone: nova
        mgmt_driver: noop

    CP11:
      type: tosca.nodes.nfv.CP.Tacker
      properties:
        management: true
        order: 0
        anti_spoofing_protection: false
      requirements:
        - virtualLink:
            node: VL1
        - virtualBinding:
            node: VDU1

    VL1:
      type: tosca.nodes.nfv.VL
      properties:
        network_name: ${DEMO_NET}
        vendor: Tacker
EOF
}

function create_servers {
    echo "Creating SFC demo instances"
    DEMO_NET=$(openstack network list | awk '/demo_net/ { print $2 }')
    IMAGE_ID=$(openstack image list | awk '/cirros/ { print $2 }')
    FLOATING_IP_CLIENT=$(openstack floating ip create public -c floating_ip_address -f value)
    FLOATING_IP_SERVER=$(openstack floating ip create public -c floating_ip_address -f value)
    openstack server create --wait --flavor m1.tiny --image $IMAGE_ID --nic net-id=$DEMO_NET sfc_server
    openstack server create --wait --flavor m1.tiny --image $IMAGE_ID --nic net-id=$DEMO_NET sfc_client
    openstack server add floating ip sfc_client $FLOATING_IP_CLIENT
    openstack server add floating ip sfc_server $FLOATING_IP_SERVER
    ANDA_SFC_CLIENT_PORT=$(openstack port list --server sfc_client | awk '/ACTIVE/ {print $2}')
}

function sfc_gen_config {
    echo "Tacker SFC config files"
    cat > ./sample-vnffgd.yaml <<EOF
tosca_definitions_version: tosca_simple_profile_for_nfv_1_0_0

description: Sample VNFFG template

topology_template:
  description: Sample VNFFG template

  node_templates:

    Forwarding_path1:
      type: tosca.nodes.nfv.FP.Tacker
      description: creates path (CP12->CP12)
      properties:
        id: 51
        policy:
          type: ACL
          criteria:
            - network_src_port_id: ${ANDA_SFC_CLIENT_PORT}
              network_id: ${DEMO_NET}
              ip_proto: 6
              destination_port_range: 80-80
        path:
          - forwarder: sample-vnfd
            capability: CP11

  groups:
    VNFFG1:
      type: tosca.groups.nfv.VNFFG
      description: HTTP to Corporate Net
      properties:
        vendor: tacker
        version: 1.0
        number_of_endpoints: 1
        dependent_virtual_link: [VL1]
        connection_point: [CP11]
        constituent_vnfs: [sample-vnfd]
      members: [Forwarding_path1]
EOF
}

function deploy {
    echo "Registering sample VIM"
    openstack vim register --is-default --config-file ./sample-vim.yaml --description "Sample VIM" sample-vim
    echo "Creating sample VNFD"
##    openstack vnf descriptor create --vnfd-file ./sample-vnfd.yaml sample-vnfd
    tacker vnfd-create --vnfd-file ./sample-vnfd.yaml sample-vnfd
    echo "Creating sample VNF"
##    VNFD_ID=$(openstack vnf descriptor list | awk '/sample-vnfd/ { print $2 }')
    VNFD_ID=$(tacker vnfd-list | awk '/sample-vnfd/ { print $2 }')
##    openstack vnf create --vnfd-id ${VNFD_ID} sample-vnf
    tacker vnf-create --vnfd-id ${VNFD_ID} sample-vnf
}

function deploy_sfc {
    create_servers
    sfc_gen_config
    echo "Creating VNFFGD"
##    openstack vnf graph descriptor create --vnffgd-file sample-vnffgd.yaml sample-vnffgd
    tacker vnffgd-create --vnffgd-file sample-vnffgd.yaml sample-vnffgd
    echo "Creating VNFFG"
##    openstack vnf graph create --vnffgd-name sample-vnffgd sample-vnffg
    tacker vnffg-create --vnffgd-name sample-vnffgd sample-vnffg
    echo "sfc_client floating ip address: $FLOATING_IP_CLIENT"
    echo "sfc_server floating ip address: $FLOATING_IP_SERVER"
    cat << EOF

Done.

To create simple HTTP server in sfc_server instance run the below command with password 'cubswin:)':

ssh cirros@$FLOATING_IP_SERVER 'while true; \\
    do echo -e "HTTP/1.0 200 OK\r\n\r\nHTTP server!" | sudo nc -l -p 80 ; done &'

EOF
}

gen_config
deploy
deploy_sfc

